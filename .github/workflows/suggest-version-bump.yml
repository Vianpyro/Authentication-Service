---
# This workflow suggests the next version bump for changed API folders and database based on PR labels and the latest tag.

name: Suggest Version Bump

permissions:
  contents: read
  statuses: read
  pull-requests: read

on:
  pull_request:
    branches:
      - main
    paths:
      - 'database/**/*.sql'
  workflow_call:
    outputs:
      api_next_version:
        description: 'Suggested next API version'
        value: ${{ jobs.analyze.outputs.api_next_version }}
      api_bump_type:
        description: 'API version bump type'
        value: ${{ jobs.analyze.outputs.api_bump_type }}
      api_latest_tag:
        description: 'Latest API tag'
        value: ${{ jobs.analyze.outputs.api_latest_tag }}
      database_next_version:
        description: 'Suggested next database version'
        value: ${{ jobs.analyze.outputs.database_next_version }}
      database_bump_type:
        description: 'Database version bump type'
        value: ${{ jobs.analyze.outputs.database_bump_type }}
      database_latest_tag:
        description: 'Latest database tag'
        value: ${{ jobs.analyze.outputs.database_latest_tag }}

jobs:
  suggest:
    uses: ./.github/workflows/detect-changed-versions.yml

  labels:
    uses: ./.github/workflows/get-pr-labels.yml

  analyze:
    name: Analyze Changes
    needs:
      - suggest
      - labels
    runs-on: ubuntu-latest
    outputs:
      api_bump_type: ${{ steps.process.outputs.api_bump }}
      api_latest_tag: ${{ steps.process.outputs.api_latest_tag }}
      api_next_version: ${{ steps.process.outputs.api_next_version }}
      database_bump_type: ${{ steps.process.outputs.database_bump }}
      database_latest_tag: ${{ steps.process.outputs.database_latest_tag }}
      database_next_version: ${{ steps.process.outputs.database_next_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Process all component versions
        id: process
        run: |
          # Function to get latest tag for a component
          get_latest_tag() {
            local prefix="$1"
            git tag --list "${prefix}*" --sort=-v:refname | head -n1
          }

          # Function to get version from tag
          parse_version_from_tag() {
            local tag="$1"
            local prefix="$2"
            echo "$tag" | sed -E "s/^${prefix}([0-9]+\.[0-9]+\.[0-9]+).*/\1/"
          }

          # Function to get database version from GitHub packages
          get_database_version_from_packages() {
            local repo_name=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            local image_name="ghcr.io/$(echo "$repo_name" | cut -d'/' -f1)/$(echo "$repo_name" | cut -d'/' -f2)-database"

            # Log in to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest container image and extract version from tags
            local version=$(docker pull "$image_name:latest" 2>/dev/null && \
              docker inspect "$image_name:latest" --format='{{json .RepoTags}}' 2>/dev/null | \
              jq -r '.[]' 2>/dev/null | \
              grep -E '^.*:[0-9]+\.[0-9]+\.[0-9]+$' | \
              sed -E 's/^.*:([0-9]+\.[0-9]+\.[0-9]+)$/\1/' | \
              head -n1)

            if [ -n "$version" ]; then
              echo "$version"
            else
              echo ""
            fi
          }

          # Function to process version bump for a component
          process_version() {
            local component="$1"
            local prefix="$2"

            LABELS="${{ needs.labels.outputs.labels }}"
            BUMP="patch"
            echo "$LABELS" | grep -q 'type: feature' && BUMP="minor"
            echo "$LABELS" | grep -q 'type: security' && BUMP="minor"
            echo "$LABELS" | grep -q 'special: breaking change' && BUMP="major"

            if [ "$component" = "api" ]; then
              # Read version from api/version.py
              if [ -f "api/version.py" ]; then
                VERSION=$(grep -E "^__version__\s*=" api/version.py | sed -E "s/^__version__\s*=\s*['\"]([^'\"]+)['\"].*$/\1/")
                if [ -n "$VERSION" ]; then
                  TAG="${prefix}${VERSION}"
                else
                  echo "Warning: Could not parse version from api/version.py, falling back to tag-based approach"
                  TAG=$(get_latest_tag "$prefix")
                  [ -z "$TAG" ] && TAG="${prefix}0.0.0"
                  VERSION=$(parse_version_from_tag "$TAG" "$prefix")
                fi
              else
                echo "Warning: api/version.py not found, falling back to tag-based approach"
                TAG=$(get_latest_tag "$prefix")
                [ -z "$TAG" ] && TAG="${prefix}0.0.0"
                VERSION=$(parse_version_from_tag "$TAG" "$prefix")
              fi
            elif [ "$component" = "database" ]; then
              # Try to get database version from GitHub packages
              PACKAGE_VERSION=$(get_database_version_from_packages)
              if [ -n "$PACKAGE_VERSION" ]; then
                VERSION="$PACKAGE_VERSION"
                TAG="${prefix}${VERSION}"
                echo "Found database version from packages: $VERSION"
              else
                echo "Could not fetch database version from packages, falling back to tag-based approach"
                TAG=$(get_latest_tag "$prefix")
                [ -z "$TAG" ] && TAG="${prefix}0.0.0"
                VERSION=$(parse_version_from_tag "$TAG" "$prefix")
              fi
            fi

            PRERELEASE=$(echo "$TAG" | sed -nE "s/^${prefix}[0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z0-9.-]+)?$/\1/p")
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

            case "$BUMP" in
              major) MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
              minor) MINOR=$((MINOR + 1)); PATCH=0 ;;
              patch) PATCH=$((PATCH + 1)) ;;
            esac

            NEXT_VERSION="${prefix}${MAJOR}.${MINOR}.${PATCH}${PRERELEASE}"

            {
              echo "${component}_bump=$BUMP"
              echo "${component}_latest_tag=$TAG"
              echo "${component}_next_version=$NEXT_VERSION"
            } >> "$GITHUB_OUTPUT"
          }

          # Process both components
          process_version "api" "api-v"
          process_version "database" "database-v"

  report:
    name: Report Summary
    needs: analyze
    runs-on: ubuntu-latest
    steps:
      - name: Generate summary
        run: |
          {
            echo "## ðŸš€ Suggested Version Bumps"
            echo "| Component | Bump Type | Latest Tag | Next Version |"
            echo "|-----------|-----------|------------|--------------|"
            echo "| API | ${{ needs.analyze.outputs.api_bump_type }} | \`${{ needs.analyze.outputs.api_latest_tag }}\` | \`${{ needs.analyze.outputs.api_next_version }}\` |"
            echo "| Database | ${{ needs.analyze.outputs.database_bump_type }} | \`${{ needs.analyze.outputs.database_latest_tag }}\` | \`${{ needs.analyze.outputs.database_next_version }}\` |"
          } >> "$GITHUB_STEP_SUMMARY"
