---
# This workflow suggests the next version bump for the service and API versions based on PR labels and changes.

name: Suggest Version Bump

permissions:
  contents: read
  statuses: read
  pull-requests: read

on:
  pull_request:
    branches:
      - main
    paths:
      - 'database/sql/**/*.sql'
      - 'api/app/**/*.py'
  workflow_call:
    outputs:
      service_next_version:
        description: 'Suggested next service version'
        value: ${{ jobs.analyze.outputs.service_next_version }}
      service_bump_type:
        description: 'Service version bump type'
        value: ${{ jobs.analyze.outputs.service_bump_type }}
      service_current_version:
        description: 'Current service version'
        value: ${{ jobs.analyze.outputs.service_current_version }}
      api_versions_bumps:
        description: 'API versions bump suggestions'
        value: ${{ jobs.analyze.outputs.api_versions_bumps }}

jobs:
  labels:
    uses: ./.github/workflows/get-pr-labels.yml

  detect-changes:
    uses: ./.github/workflows/detect-changed-versions.yml

  analyze:
    name: Analyze Changes
    needs:
      - labels
      - detect-changes
    runs-on: ubuntu-latest
    outputs:
      service_bump_type: ${{ steps.process.outputs.service_bump }}
      service_current_version: ${{ steps.process.outputs.service_current_version }}
      service_next_version: ${{ steps.process.outputs.service_next_version }}
      api_versions_bumps: ${{ steps.process.outputs.api_versions_bumps }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Process version bumps
        id: process
        run: |
          # Function to get changed files
          get_changed_files() {
            git fetch origin main
            BASE_SHA=$(git merge-base HEAD origin/main)
            git diff --name-only "$BASE_SHA"...HEAD
          }

          # Function to determine bump type from labels
          determine_bump_type() {
            local labels="$1"
            local bump="patch"

            echo "$labels" | grep -q 'type: feature' && bump="minor"
            echo "$labels" | grep -q 'type: security' && bump="minor"
            echo "$labels" | grep -q 'special: breaking change' && bump="major"

            echo "$bump"
          }

          # Function to bump version
          bump_version() {
            local version="$1"
            local bump_type="$2"

            IFS='.' read -r major minor patch <<< "$version"

            case "$bump_type" in
              major) major=$((major + 1)); minor=0; patch=0 ;;
              minor) minor=$((minor + 1)); patch=0 ;;
              patch) patch=$((patch + 1)) ;;
            esac

            echo "${major}.${minor}.${patch}"
          }

          # Get current service version from api/app/version.py
          if [ -f "api/app/version.py" ]; then
            SERVICE_VERSION=$(grep -E "^__version__\s*=" api/app/version.py | sed -E "s/^__version__\s*=\s*['\"]([^'\"]+)['\"].*$/\1/")
            if [ -z "$SERVICE_VERSION" ]; then
              echo "Warning: Could not parse version from api/app/version.py, using 0.0.0"
              SERVICE_VERSION="0.0.0"
            fi
          else
            echo "Warning: api/app/version.py not found, using 0.0.0"
            SERVICE_VERSION="0.0.0"
          fi

          # Get labels and determine bump type
          LABELS="${{ needs.labels.outputs.labels }}"
          BUMP_TYPE=$(determine_bump_type "$LABELS")

          # Check if changes require service version bump
          CHANGED_FILES=$(get_changed_files)
          SERVICE_NEEDS_BUMP=false

          if echo "$CHANGED_FILES" | grep -E '\.(sql|py)$' > /dev/null; then
            SERVICE_NEEDS_BUMP=true
          fi

          # Calculate next service version
          if [ "$SERVICE_NEEDS_BUMP" = true ]; then
            SERVICE_NEXT_VERSION=$(bump_version "$SERVICE_VERSION" "$BUMP_TYPE")
          else
            SERVICE_NEXT_VERSION="$SERVICE_VERSION"
          fi

          # Process API version changes using the detected changes from the reusable workflow
          API_VERSIONS_BUMPS=""
          CHANGED_API_VERSIONS="${{ needs.detect-changes.outputs.versions }}"

          if [ -n "$CHANGED_API_VERSIONS" ]; then
            for version_dir in $CHANGED_API_VERSIONS; do
              # Get current version from __init__.py
              if [ -f "api/app/routes/$version_dir/__init__.py" ]; then
                CURRENT_API_VERSION=$(grep -E "^__version__\s*=" "api/app/routes/$version_dir/__init__.py" | sed -E "s/^__version__\s*=\s*['\"]([^'\"]+)['\"].*$/\1/")
                if [ -z "$CURRENT_API_VERSION" ]; then
                  echo "Warning: Could not parse version from api/app/routes/$version_dir/__init__.py, using 1.0.0"
                  CURRENT_API_VERSION="1.0.0"
                fi
              else
                echo "Warning: api/app/routes/$version_dir/__init__.py not found, using 1.0.0"
                CURRENT_API_VERSION="1.0.0"
              fi

              # Calculate next API version
              NEXT_API_VERSION=$(bump_version "$CURRENT_API_VERSION" "$BUMP_TYPE")

              # Add to bumps list
              if [ -n "$API_VERSIONS_BUMPS" ]; then
                API_VERSIONS_BUMPS="$API_VERSIONS_BUMPS,$version_dir:$CURRENT_API_VERSION->$NEXT_API_VERSION($BUMP_TYPE)"
              else
                API_VERSIONS_BUMPS="$version_dir:$CURRENT_API_VERSION->$NEXT_API_VERSION($BUMP_TYPE)"
              fi
            done
          fi

          # Output results
          {
            echo "service_bump=$BUMP_TYPE"
            echo "service_current_version=$SERVICE_VERSION"
            echo "service_next_version=$SERVICE_NEXT_VERSION"
            echo "api_versions_bumps=$API_VERSIONS_BUMPS"
          } >> "$GITHUB_OUTPUT"

          # Debug output
          echo "Service version: $SERVICE_VERSION -> $SERVICE_NEXT_VERSION ($BUMP_TYPE)"
          if [ -n "$API_VERSIONS_BUMPS" ]; then
            echo "API versions: $API_VERSIONS_BUMPS"
          fi

  report:
    name: Report Summary
    needs: analyze
    runs-on: ubuntu-latest
    steps:
      - name: Generate summary
        run: |
          {
            echo "## ðŸš€ Suggested Version Bumps"
            echo ""
            echo "### Service Version"
            echo "| Component | Bump Type | Current Version | Next Version |"
            echo "|-----------|-----------|-----------------|--------------|"
            echo "| Service | ${{ needs.analyze.outputs.service_bump_type }} | \`${{ needs.analyze.outputs.service_current_version }}\` | \`${{ needs.analyze.outputs.service_next_version }}\` |"

            API_VERSIONS_BUMPS="${{ needs.analyze.outputs.api_versions_bumps }}"
            if [ -n "$API_VERSIONS_BUMPS" ]; then
              echo ""
              echo "### API Versions"
              echo "| API Version | Current | Next | Bump Type |"
              echo "|-------------|---------|------|-----------|"

              IFS=',' read -ra BUMPS <<< "$API_VERSIONS_BUMPS"
              for bump in "${BUMPS[@]}"; do
                IFS=':' read -r version_dir version_info <<< "$bump"
                IFS='(' read -r version_change bump_type <<< "$version_info"
                bump_type=$(echo "$bump_type" | sed 's/)//')
                IFS='->' read -r current_ver next_ver <<< "$version_change"
                echo "| $version_dir | \`$current_ver\` | \`$next_ver\` | $bump_type |"
              done
            fi
          } >> "$GITHUB_STEP_SUMMARY"
