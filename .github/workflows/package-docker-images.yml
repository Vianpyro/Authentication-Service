---
name: Package Docker Images for Authentication Service's API and Database

permissions:
  packages: write

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api-changed }}
      db-changed: ${{ steps.changes.outputs.db-changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "api-changed=true" >> "$GITHUB_OUTPUT"
            echo "db-changed=true" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.event_name }}" = "release" ]; then
            # Get the previous release tag
            PREV_TAG=$(git tag --sort=-version:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+' | sed -n '2p')
            if [ -z "$PREV_TAG" ]; then
              echo "api-changed=true" >> "$GITHUB_OUTPUT"
              echo "db-changed=true" >> "$GITHUB_OUTPUT"
            else
              # Check if any .py files in api/ folder changed since previous release
              API_CHANGED_FILES=$(git diff --name-only "$PREV_TAG"..HEAD | grep '^api/.*\.py$' || true)
              if [ -n "$API_CHANGED_FILES" ]; then
                echo "api-changed=true" >> "$GITHUB_OUTPUT"
                echo "Changed API files:"
                echo "$API_CHANGED_FILES"
              else
                echo "api-changed=false" >> "$GITHUB_OUTPUT"
                echo "No .py files changed in api/ folder"
              fi

              # Check if any database files changed since previous release
              DB_CHANGED_FILES=$(git diff --name-only "$PREV_TAG"..HEAD | grep -E '^(database/|db/).*\.(sql|py|sh|dockerfile|Dockerfile)$' || true)
              if [ -n "$DB_CHANGED_FILES" ]; then
                echo "db-changed=true" >> "$GITHUB_OUTPUT"
                echo "Changed database files:"
                echo "$DB_CHANGED_FILES"
              else
                echo "db-changed=false" >> "$GITHUB_OUTPUT"
                echo "No database files changed"
              fi
            fi
          fi

  docker-api:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.api-changed == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            # Use release tag, remove 'v' prefix if present
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"
          else
            # Extract from version file
            VERSION=$(grep -oP '__version__\s*=\s*"\K[0-9]+\.[0-9]+\.[0-9]+' api/version.py)
          fi
          echo "tag=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Building API version: $VERSION"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Normalize image name
        run: |
          echo "REPO_LOWER=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"

      - name: Build and push multi-arch API Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6,linux/386,linux/ppc64le,linux/s390x
          push: true
          tags: |
            ghcr.io/${{ env.REPO_LOWER }}-api:${{ steps.version.outputs.tag }}
            ghcr.io/${{ env.REPO_LOWER }}-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate API SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ env.REPO_LOWER }}-api:${{ steps.version.outputs.tag }}
          format: spdx-json

  docker-db:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.db-changed == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            # Use release tag, remove 'v' prefix if present
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"
          else
            # Extract from version file or use timestamp for database
            if [ -f "database/version.py" ]; then
              VERSION=$(grep -oP '__version__\s*=\s*"\K[0-9]+\.[0-9]+\.[0-9]+' database/version.py)
            elif [ -f "api/version.py" ]; then
              VERSION=$(grep -oP '__version__\s*=\s*"\K[0-9]+\.[0-9]+\.[0-9]+' api/version.py)
            else
              VERSION="$(date +%Y.%m.%d)"
            fi
          fi
          echo "tag=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Building database version: $VERSION"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Normalize image name
        run: |
          echo "REPO_LOWER=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"

      - name: Build and push multi-arch database Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./database
          file: ./database/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6,linux/386,linux/ppc64le,linux/s390x
          push: true
          tags: |
            ghcr.io/${{ env.REPO_LOWER }}-db:${{ steps.version.outputs.tag }}
            ghcr.io/${{ env.REPO_LOWER }}-db:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate database SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ env.REPO_LOWER }}-db:${{ steps.version.outputs.tag }}
          format: spdx-json
