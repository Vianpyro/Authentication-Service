---
name: Package Docker Images

permissions:
  packages: write
  contents: write

on:
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.tag }}
      repo-lower: ${{ steps.repo.outputs.name }}
      components: ${{ steps.changes.outputs.components }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"
          elif [ -f "api/version.py" ]; then
            VERSION=$(grep -oP '__version__\s*=\s*"\K[0-9]+\.[0-9]+\.[0-9]+' api/version.py)
          else
            VERSION=$(date +%Y.%m.%d.%H%M)
          fi
          echo "tag=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Normalize repository name
        id: repo
        run: echo "name=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Check changes and validate
        id: changes
        run: |
          # Validate Dockerfiles exist
          for component in api database; do
            [ ! -f "$component/Dockerfile" ] && echo "Dockerfile not found in $component/" && exit 1
          done

          COMPONENTS='[]'
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            COMPONENTS='["api", "database"]'
          elif [ "${{ github.event_name }}" = "release" ]; then
            PREV_TAG=$(git tag --sort=-version:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+' | sed -n '2p')
            if [ -z "$PREV_TAG" ]; then
              COMPONENTS='["api", "database"]'
            else
              CHANGED_COMPONENTS=()
              # Check API changes
              if git diff --name-only "$PREV_TAG"..HEAD | grep -q '^api/.*\.py$'; then
                CHANGED_COMPONENTS+=("api")
              fi
              # Check database changes
              if git diff --name-only "$PREV_TAG"..HEAD | grep -qE '^(database/|db/).*\.(sql|py|sh|dockerfile|Dockerfile)$'; then
                CHANGED_COMPONENTS+=("database")
              fi

              if [ ${#CHANGED_COMPONENTS[@]} -eq 0 ]; then
                COMPONENTS='[]'
              else
                COMPONENTS=$(printf '"%s"\n' "${CHANGED_COMPONENTS[@]}" | jq -s .)
              fi
            fi
          fi
          echo "components=$COMPONENTS" >> "$GITHUB_OUTPUT"

  docker-build:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.components != '[]'
    strategy:
      matrix:
        component: ${{ fromJson(needs.setup.outputs.components) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ needs.setup.outputs.repo-lower }}-${{ matrix.component }}:${{ needs.setup.outputs.version }}
            ghcr.io/${{ needs.setup.outputs.repo-lower }}-${{ matrix.component }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ needs.setup.outputs.repo-lower }}-${{ matrix.component }}:${{ needs.setup.outputs.version }}
          format: spdx-json
          upload-release-assets: false
          artifact-name: sbom-${{ matrix.component }}-${{ needs.setup.outputs.version }}
